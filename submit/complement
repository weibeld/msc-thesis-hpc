#!/bin/bash
#
# Sun Grid Engine job script
#
# Complement all the automata in 'data' (.tar.gz archive) with the specified
# complementation construction 'algo' in GOAL. Write generated number of states
# and other data to a CSV file (one line per complemented automaton).
#
# Dependencies:
#   - Variable "goal" containing path to root directory of GOAL
#   - Plugin ch.unifr.goal.complement installed in GOAL (for 'fribourg')
#   - Input filenames like 's15_t1.0_a0.1_001.gff' (for detecting dt and da)
#
# Daniel Weibel <daniel.weibel@unifr.ch> Sep. 2014 - May 2015
#------------------------------------------------------------------------------#

usage() {
cat <<EOF
USAGE
 ${0##*/} -a algo -d data -t timeout -m memory [-i id_start] [-n]

DESCRIPTION
 Complement all the automata in 'data' with 'timeout' sec. maximum time per
 automaton, and 'memory' Java heap size.

ARGUMENTS
 -a: Complementation construction including options (e.g. "fribourg -r2c -m1")
 -d: Absolute path to .tar.gz archive with input automata
 -t: Timeout in seconds (e.g. 600), set to 0 to disable timeout
 -m: Maximum Java heap size (e.g. 1G)
 -i: Start numerating automata in CSV file from this number (column 'id')
 -n: Suppress printing of CSV header (comments are still printed)
EOF
}
[[ "$1" = --help ]] && usage && exit

# Print error message to stderr and exit
abort() {
  echo -e "${0##*/}: $1" >&2
  exit 1
}

while getopts ":a:d:t:m:i:n" opt; do
  case $opt in
    a) algo=$OPTARG    ;;
    d) data=$OPTARG    ;;
    t) timeout=$OPTARG ;;
    m) memory=$OPTARG  ;;
    i) i0=$OPTARG      ;;
    n) no_header=true  ;;
    \?) abort "invalid option: -$OPTARG"             ;;
    :)  abort "option -$OPTARG requires an argument" ;;
  esac
done

# Nice date
d() { date "+%F %H:%M:%S"; }

# Convert a UNIX 'time' time representation (e.g. "4m54.234s") to seconds
seconds() {
  m=$(echo "$1" | egrep -o '[0-9]*m' | sed 's/m$//')
  s=$(echo "$1" | egrep -o '[0-9][0-9]?.[0-9]*s' | sed 's/s$//')
  seconds=$(bc <<< "$m * 60 + $s")
  printf "%.3f" "$seconds"  # printf performs rounding
}

# Test for absolute path and file existence
check_file() {
  path=$1
  [[ ! -f "$path"  ]] && abort "\"$path\" is not a valid file"
  [[ "$path" != /* ]] && abort "must specify absolute path: $path"
}

# Check arguments
[[ -z "$algo"          ]] && abort "must specify -a option"
[[ -z "$data"          ]] && abort "must specify -d option"
check_file "$data"
[[ -z "$timeout"       ]] && abort "must specify -t option"
[[ -z "$memory"        ]] && abort "must specify -m option"
[[ -z "$i0"            ]] && i0=1
[[ ! "$i0" =~ ^[0-9]+$ ]] && abort "'$i0' is not a valid number"


# Copy input data to local scratch and extract automata to $TMP/input
cp "$data" "$TMP"/tmp.tar.gz
mkdir "$TMP"/input
tar xzf "$TMP"/tmp.tar.gz -C "$TMP"/input --strip-components 1
input="$TMP"/input

# Copy GOAL to local scratch
mkdir "$TMP"/goal
cp -r "$goal"/* "$TMP"/goal

# Our "command" to execute GOAL. Note: 'gc' is for command line, 'goal' for GUI.
goal() { "$TMP"/goal/gc "$@"; }

# Set max. and initial Java heap size. This variable is read by 'goal' and 'gc'.
export JVMARGS="-Xmx$memory -Xms$memory"

# Test if algo and options are valid by trying to complement a random automaton
goal generate -s 1 >"$TMP"/tmp.gff
# GOAL always returns a 0 exit code, even if there was an error. Thus, we have
# to detect failure by examining if something has been written to stderr.
err=$(goal complement -m $algo "$TMP"/tmp.gff 2>&1 1>/dev/null)
[[ -n "$err" ]] && abort "GOAL error: $err"

# Result CSV file
csv=$JOB_NAME.csv
touch RUNNING

# CSV comments
cat <<EOF >"$csv"
# Starting date:             $(d)
# Cluster job name:          $JOB_NAME
# Cluster job ID:            $JOB_ID
# Cluster node:              $HOSTNAME
# Cluster queue:             $QUEUE
# GOAL command:              complement -m $algo
# Input data:                $(basename $data)
# Memory limit (Java heap):  $memory
# Timeout (CPU time):        $([[ $timeout -eq 0 ]] && echo "No timeout" \
                                                    || echo ${timeout}s)
EOF

[[ -z "$no_header" ]] &&
echo "id,states,timeout,memout,cpu_time,real_time,dt,da,file" >>"$csv"

# Files for capturing stdout and stderr of the GOAL complementation command
stdout="$TMP"/stdout
stderr="$TMP"/stderr

i=$i0
# Loop through all the input automata
for file in "$input"/*.gff; do

  # Set maximum time after which running commands are killed
  [[ "$timeout" -gt 0 ]] && ulimit -S -t "$timeout"

  # Complement the automaton
  { time goal complement -m $algo "$file"; } 1>"$stdout" 2>"$stderr"
  # If timeout:
  #   - exit code 152
  #   - to stderr: ...goal: line 19: <PID> CPU time limit exceeded (core dumped) java ${JVMARGS} ...
  #   - Java core dump file core.<PID> in working directory
  # If memory out:
  #   - exit code 0
  #   - to stderr: Exception in thread "Thread-1" java.lang.OutOfMemoryError: Java heap space ...

  # Reset time restriction
  ulimit -S -t unlimited

  t_out=N; m_out=N

  # Detect timeout
  if grep -q "time limit exceeded" "$stderr"; then
    t_out=Y
    states=NA
    rm core.*  # Remove core dump file

  # Detect memory out
  elif grep -q "java.lang.OutOfMemoryError" "$stderr"; then
    m_out=Y
    states=NA

  # If there's no timeout or memory out, the complementation was successful.
  # Outputs: complement automaton --> stdout; 'time' output --> stderr
  else
    # Number of states of complement. Using grep is faster than 'goal stat'.
    states=$(grep -c "sid=" "$stdout")
  fi

  # Convert execution times to seconds. The time output is always in $stderr
  real=$(seconds $(grep '^real' "$stderr" | cut -f 2))
  ucpu=$(seconds $(grep '^user' "$stderr" | cut -f 2))
  scpu=$(seconds $(grep '^sys'  "$stderr" | cut -f 2))
  total_cpu=$(bc <<< "$ucpu + $scpu")

  # Extract transtion and acceptance densitiy from file name. Assumes filename
  # of the form s15_t1.0_a0.1_001.gff
  dt=$(echo ${file##*/} | egrep -o "t[0-9].[0-9]" | sed 's/^t//')
  da=$(echo ${file##*/} | egrep -o "a[0-9].[0-9]" | sed 's/^a//')

  # Write CSV line
  echo "$i,$states,$t_out,$m_out,$total_cpu,$real,$dt,$da,${file##*/}" >>"$csv"
  i=$(($i + 1))
done

mv RUNNING FINISHED
