#!/bin/bash
#
# Sun Grid Engine job script
#
# Complementation-equivalence test on random automata. Generates random automata
# on the fly. Writes to stdout. Assumes ythat stdout file is named "stdout".
#
# EDIT May 2015: no rewrite/cleaning done on this file yet
#
# dw-03.11.2014
#------------------------------------------------------------------------------#

set -e

# To adapt if necessary
goal_archive=~/bin/GOAL-20141117.tar.gz # GOAL version to use
goal_batch=~/scripts/compleq/compleq.gs # See ~/gs/test_correctness.gs

# Default values for command line options
algo="fribourg -r"
runs=5
memory=2G
states=4-4
symbols=2-4

usage() {
  echo "USAGE:"
  echo "    $(basename $0) [OPTIONS]"
  echo
  echo "OPTIONS:                                            [DEFAULT]"
  echo "    -c: Complementation construction                [\"$algo\"]"
  echo "    -r: Runs                                        [$runs]"
  echo "    -m: Memory (max. Java heap size)                [$memory]"
  echo "    -s: Number of states of random automata         [$states]"
  echo "    -a: Number of symbols of random automata        [$symbols]"
}
if [ "$1" == -h ]; then usage; exit 0; fi

while getopts ":c:r:m:s:a:" opt; do
  case $opt in
    c) algo=$OPTARG;    ;;
    r) runs=$OPTARG;    ;;
    m) memory=$OPTARG;  ;;
    s) states=$OPTARG;  ;;
    a) symbols=$OPTARG; ;;
    \?) echo "Error: invalid option: -$OPTARG";             exit 1 ;;
    :)  echo "Error: option -$OPTARG requires an argument"; exit 1 ;;
  esac
done

# Split algo in "construction" and "options" part
constr=$(echo $algo | awk '{print $1}')
opts=$(echo $algo | awk '{$1=""; print $0}')

# Extract min and max values
s_min=$(cut -d - -f 1 <<<"$states")
s_max=$(cut -d - -f 2 <<<"$states")
a_min=$(cut -d - -f 1 <<<"$symbols")
a_max=$(cut -d - -f 2 <<<"$symbols")

# Copy GOAL script to local scratch
batch=$TMP/batch.gs
cp $goal_batch $batch

# Copy GOAL to local scratch
cp $goal_archive $TMP/tmp.tar.gz
goal_dir=$TMP/GOAL
mkdir $goal_dir
tar xzf $TMP/tmp.tar.gz -C $goal_dir --strip-components 1 && rm $TMP/tmp.tar.gz
goal=$goal_dir/gc

# Limit Java heap (prevent that GOAL uses more memory than allocated to the job)
export JVMARGS="-Xmx$memory -Xms$memory"

# It's possible that GOAL aborts, usually due to a memory excess. In that case,
# the command is repeated until the required number of tests is done.
todo=$runs
while true; do
  $goal batch $batch $constr "$opts" $todo $s_min $s_max $a_min $a_max
  done=$(grep "Elapsed time:" stdout | wc -l)
  if [ $done -lt $runs ]; then
    echo -e "\n\n================\n* GOAL Aborted *\n================\n\n"
    todo=$(($runs-$done))
  else break;
  fi
done
